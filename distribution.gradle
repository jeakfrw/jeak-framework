import org.apache.tools.ant.taskdefs.condition.Os

task zipDistribution(type: Zip) {
    dependsOn 'jar'

    from("${buildDir}/libs") {
        include(jar.archiveFileName.get())
        rename(jar.archiveFileName.get().toString(), "jeakbot.jar")
    }
    from 'src/deploy/scripts'
    into('libraries') {
        from configurations.runtimeClasspath
        exclude { dep -> !dep.file.name.endsWith('.jar') }
    }
    into('libraries/licenses') {
        from 'src/deploy/licenses'
        exclude { lic -> !lic.file.name.endsWith('.txt') }
    }
    into('utils') {
        from 'src/deploy/utils'
        fileMode = 0755
        exclude { f -> f.file.name.endsWith('.jks') || f.file.name.endsWith('.pem') || f.file.name.endsWith('.der') }
    }
    into('plugins') {
        from 'run/.gitkeep'
    }
}

task tarDistribution(type: Tar) {
    dependsOn 'jar'

    from("${buildDir}/libs") {
        include(jar.archiveFileName.get())
        rename(jar.archiveFileName.get(), "jeakbot.jar")
    }
    from 'src/deploy/scripts'
    into('libraries') {
        from configurations.runtimeClasspath
        exclude { dep -> !dep.file.name.endsWith('.jar') }
    }
    into('libraries/licenses') {
        from 'src/deploy/licenses'
        exclude { lic -> !lic.file.name.endsWith('.txt') }
    }
    into('utils') {
        from 'src/deploy/utils'
        fileMode = 0755
        exclude { f -> f.file.name.endsWith('.jks') || f.file.name.endsWith('.pem') || f.file.name.endsWith('.der') }
    }
    into('plugins') {
        from 'run/.gitkeep'
    }

    extension 'tar.gz'
    compression = Compression.GZIP
}

if (Os.isFamily(Os.FAMILY_MAC) || Os.isFamily(Os.FAMILY_UNIX)) {
    def distributionRepo = "https://nexus.fearnixx.de/repository/jeakbot-dist"

    task uploadZipDistribution(type: Exec) {
        def file = zipDistribution.archivePath.getCanonicalPath()
        def repoPath = "${distributionRepo}/${zipDistribution.archiveName}"
        println "Distribution: ${file} => ${repoPath}"
        commandLine 'sh', '-c', "./upload_archive.sh '${file}' '${repoPath}'"

        environment = [
                "DIST_NEXUS_USER": project.findProperty('fngNexusUser'),
                "DIST_NEXUS_PASS": project.findProperty('fngNexusPass')
        ]
        dependsOn zipDistribution
    }

    task uploadTarDistribution(type: Exec) {
        def file = tarDistribution.archivePath.getCanonicalPath()
        def repoPath = "${distributionRepo}/${tarDistribution.archiveName}"
        println "Distribution: ${file} => ${repoPath}"
        commandLine 'sh', '-c', "./upload_archive.sh '${file}' '${repoPath}'"

        environment = [
                "DIST_USER": project.findProperty('fngNexusUser'),
                "DIST_PASS": project.findProperty('fngNexusPass')
        ]
        dependsOn tarDistribution
    }
} else {
    println "Not registering upload tasks - not a UNIX environment."
}
